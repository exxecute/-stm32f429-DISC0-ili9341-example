
lcd_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b94  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08002d40  08002d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f0  080034f0  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034f8  080034f8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034fc  080034fc  000134fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08003500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          000000d4  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .debug_info   000075b7  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016a1  00000000  00000000  0002760f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  00028cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000680  00000000  00000000  000293f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bce  00000000  00000000  00029a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c71  00000000  00000000  0004d646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1a42  00000000  00000000  000562b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127cf9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bf4  00000000  00000000  00127d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002d28 	.word	0x08002d28

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	08002d28 	.word	0x08002d28

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <LCD_IO_Init>:
//LCD
static uint8_t Is_LCD_IO_Initialized = 0;

/*################################ LCD #######################################*/
void LCD_IO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80004f6:	4b36      	ldr	r3, [pc, #216]	; (80005d0 <LCD_IO_Init+0xe0>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d164      	bne.n	80005c8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80004fe:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <LCD_IO_Init+0xe0>)
 8000500:	2201      	movs	r2, #1
 8000502:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <LCD_IO_Init+0xe4>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	4a31      	ldr	r2, [pc, #196]	; (80005d4 <LCD_IO_Init+0xe4>)
 800050e:	f043 0308 	orr.w	r3, r3, #8
 8000512:	6313      	str	r3, [r2, #48]	; 0x30
 8000514:	4b2f      	ldr	r3, [pc, #188]	; (80005d4 <LCD_IO_Init+0xe4>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	f003 0308 	and.w	r3, r3, #8
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000524:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800052e:	2302      	movs	r3, #2
 8000530:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	4619      	mov	r1, r3
 8000538:	4827      	ldr	r0, [pc, #156]	; (80005d8 <LCD_IO_Init+0xe8>)
 800053a:	f001 fa0d 	bl	8001958 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <LCD_IO_Init+0xe4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a23      	ldr	r2, [pc, #140]	; (80005d4 <LCD_IO_Init+0xe4>)
 8000548:	f043 0308 	orr.w	r3, r3, #8
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <LCD_IO_Init+0xe4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0308 	and.w	r3, r3, #8
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800055a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800055e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000568:	2302      	movs	r3, #2
 800056a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4819      	ldr	r0, [pc, #100]	; (80005d8 <LCD_IO_Init+0xe8>)
 8000574:	f001 f9f0 	bl	8001958 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <LCD_IO_Init+0xe4>)
 800057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000580:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <LCD_IO_Init+0xe4>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	6313      	str	r3, [r2, #48]	; 0x30
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <LCD_IO_Init+0xe4>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000594:	2304      	movs	r3, #4
 8000596:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	4619      	mov	r1, r3
 80005aa:	480c      	ldr	r0, [pc, #48]	; (80005dc <LCD_IO_Init+0xec>)
 80005ac:	f001 f9d4 	bl	8001958 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80005b0:	2200      	movs	r2, #0
 80005b2:	2104      	movs	r1, #4
 80005b4:	4809      	ldr	r0, [pc, #36]	; (80005dc <LCD_IO_Init+0xec>)
 80005b6:	f001 fc87 	bl	8001ec8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80005ba:	2201      	movs	r2, #1
 80005bc:	2104      	movs	r1, #4
 80005be:	4807      	ldr	r0, [pc, #28]	; (80005dc <LCD_IO_Init+0xec>)
 80005c0:	f001 fc82 	bl	8001ec8 <HAL_GPIO_WritePin>

    SPIx_Init();
 80005c4:	f000 f896 	bl	80006f4 <SPIx_Init>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000009c 	.word	0x2000009c
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020c00 	.word	0x40020c00
 80005dc:	40020800 	.word	0x40020800

080005e0 <LCD_IO_WriteData>:

void LCD_IO_WriteData(uint16_t RegValue)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f0:	480a      	ldr	r0, [pc, #40]	; (800061c <LCD_IO_WriteData+0x3c>)
 80005f2:	f001 fc69 	bl	8001ec8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80005f6:	2200      	movs	r2, #0
 80005f8:	2104      	movs	r1, #4
 80005fa:	4809      	ldr	r0, [pc, #36]	; (8000620 <LCD_IO_WriteData+0x40>)
 80005fc:	f001 fc64 	bl	8001ec8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f8b0 	bl	8000768 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000608:	2201      	movs	r2, #1
 800060a:	2104      	movs	r1, #4
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <LCD_IO_WriteData+0x40>)
 800060e:	f001 fc5b 	bl	8001ec8 <HAL_GPIO_WritePin>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40020c00 	.word	0x40020c00
 8000620:	40020800 	.word	0x40020800

08000624 <LCD_IO_WriteReg>:

void LCD_IO_WriteReg(uint8_t Reg)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <LCD_IO_WriteReg+0x3c>)
 8000636:	f001 fc47 	bl	8001ec8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800063a:	2200      	movs	r2, #0
 800063c:	2104      	movs	r1, #4
 800063e:	4809      	ldr	r0, [pc, #36]	; (8000664 <LCD_IO_WriteReg+0x40>)
 8000640:	f001 fc42 	bl	8001ec8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	b29b      	uxth	r3, r3
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f88d 	bl	8000768 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800064e:	2201      	movs	r2, #1
 8000650:	2104      	movs	r1, #4
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <LCD_IO_WriteReg+0x40>)
 8000654:	f001 fc38 	bl	8001ec8 <HAL_GPIO_WritePin>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40020c00 	.word	0x40020c00
 8000664:	40020800 	.word	0x40020800

08000668 <LCD_Delay>:

  return readvalue;
}

void LCD_Delay(uint32_t Delay)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f001 f867 	bl	8001744 <HAL_Delay>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <SPIx_MspInit>:

/*################################ SPI #######################################*/
void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <SPIx_MspInit+0x6c>)
 800068e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000690:	4a16      	ldr	r2, [pc, #88]	; (80006ec <SPIx_MspInit+0x6c>)
 8000692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000696:	6453      	str	r3, [r2, #68]	; 0x44
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <SPIx_MspInit+0x6c>)
 800069a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <SPIx_MspInit+0x6c>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ac:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <SPIx_MspInit+0x6c>)
 80006ae:	f043 0320 	orr.w	r3, r3, #32
 80006b2:	6313      	str	r3, [r2, #48]	; 0x30
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <SPIx_MspInit+0x6c>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	f003 0320 	and.w	r3, r3, #32
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80006c0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80006ce:	2301      	movs	r3, #1
 80006d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80006d2:	2305      	movs	r3, #5
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <SPIx_MspInit+0x70>)
 80006de:	f001 f93b 	bl	8001958 <HAL_GPIO_Init>
}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	; 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40021400 	.word	0x40021400

080006f4 <SPIx_Init>:

void SPIx_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80006f8:	4819      	ldr	r0, [pc, #100]	; (8000760 <SPIx_Init+0x6c>)
 80006fa:	f002 fa10 	bl	8002b1e <HAL_SPI_GetState>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d12b      	bne.n	800075c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <SPIx_Init+0x6c>)
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <SPIx_Init+0x70>)
 8000708:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <SPIx_Init+0x6c>)
 800070c:	2218      	movs	r2, #24
 800070e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <SPIx_Init+0x6c>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <SPIx_Init+0x6c>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800071c:	4b10      	ldr	r3, [pc, #64]	; (8000760 <SPIx_Init+0x6c>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SPIx_Init+0x6c>)
 8000724:	2200      	movs	r2, #0
 8000726:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <SPIx_Init+0x6c>)
 800072a:	2207      	movs	r2, #7
 800072c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <SPIx_Init+0x6c>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <SPIx_Init+0x6c>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <SPIx_Init+0x6c>)
 800073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000740:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <SPIx_Init+0x6c>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SPIx_Init+0x6c>)
 800074a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800074e:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <SPIx_Init+0x6c>)
 8000752:	f7ff ff95 	bl	8000680 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000756:	4802      	ldr	r0, [pc, #8]	; (8000760 <SPIx_Init+0x6c>)
 8000758:	f001 fff4 	bl	8002744 <HAL_SPI_Init>
  }
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000044 	.word	0x20000044
 8000764:	40015000 	.word	0x40015000

08000768 <SPIx_Write>:

void SPIx_Write(uint16_t Value)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <SPIx_Write+0x34>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1db9      	adds	r1, r7, #6
 800077c:	2201      	movs	r2, #1
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <SPIx_Write+0x38>)
 8000780:	f002 f891 	bl	80028a6 <HAL_SPI_Transmit>
 8000784:	4603      	mov	r3, r0
 8000786:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800078e:	f000 f809 	bl	80007a4 <SPIx_Error>
  }
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000044 	.word	0x20000044

080007a4 <SPIx_Error>:

  return receivedbyte;
}

void SPIx_Error(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <SPIx_Error+0x14>)
 80007aa:	f002 f854 	bl	8002856 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80007ae:	f7ff ffa1 	bl	80006f4 <SPIx_Init>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000044 	.word	0x20000044

080007bc <Font_GetFont>:
		ascii_table_font12,
		12,
		8,
};

font* Font_GetFont(uint8_t Font) {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	switch(Font) {
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d00a      	beq.n	80007e2 <Font_GetFont+0x26>
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	dc0a      	bgt.n	80007e6 <Font_GetFont+0x2a>
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d002      	beq.n	80007da <Font_GetFont+0x1e>
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d002      	beq.n	80007de <Font_GetFont+0x22>
 80007d8:	e005      	b.n	80007e6 <Font_GetFont+0x2a>
	case FONT8:
		return &font8;
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <Font_GetFont+0x38>)
 80007dc:	e004      	b.n	80007e8 <Font_GetFont+0x2c>

	case FONT12:
		return &font12;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <Font_GetFont+0x3c>)
 80007e0:	e002      	b.n	80007e8 <Font_GetFont+0x2c>

	case FONT7:
		return &font7x5;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <Font_GetFont+0x40>)
 80007e4:	e000      	b.n	80007e8 <Font_GetFont+0x2c>

	default:
		return &font8;
 80007e6:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <Font_GetFont+0x38>)
	}
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	2000000c 	.word	0x2000000c
 80007f8:	20000014 	.word	0x20000014
 80007fc:	20000004 	.word	0x20000004

08000800 <Font_GetPage>:

uint8_t Font_GetPage(uint8_t Font, uint8_t Letter, uint8_t height) {
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
 800080a:	460b      	mov	r3, r1
 800080c:	71bb      	strb	r3, [r7, #6]
 800080e:	4613      	mov	r3, r2
 8000810:	717b      	strb	r3, [r7, #5]
	switch(Font) {
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <Font_GetPage+0x1e>
 8000818:	2b01      	cmp	r3, #1
 800081a:	d00a      	beq.n	8000832 <Font_GetPage+0x32>
 800081c:	e016      	b.n	800084c <Font_GetPage+0x4c>
	case FONT8:
		return ascii_table_font8[(int)Letter - 32][height];
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	f1a3 0220 	sub.w	r2, r3, #32
 8000824:	797b      	ldrb	r3, [r7, #5]
 8000826:	4911      	ldr	r1, [pc, #68]	; (800086c <Font_GetPage+0x6c>)
 8000828:	00d2      	lsls	r2, r2, #3
 800082a:	440a      	add	r2, r1
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	e015      	b.n	800085e <Font_GetPage+0x5e>

	case FONT12:
			return ascii_table_font12[(int)Letter - 32][height];
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	f1a3 0220 	sub.w	r2, r3, #32
 8000838:	7979      	ldrb	r1, [r7, #5]
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <Font_GetPage+0x70>)
 800083c:	4613      	mov	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4413      	add	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4403      	add	r3, r0
 8000846:	440b      	add	r3, r1
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	e008      	b.n	800085e <Font_GetPage+0x5e>

	default:
		return ascii_table_font8[(int)Letter - 32][height];
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	f1a3 0220 	sub.w	r2, r3, #32
 8000852:	797b      	ldrb	r3, [r7, #5]
 8000854:	4905      	ldr	r1, [pc, #20]	; (800086c <Font_GetPage+0x6c>)
 8000856:	00d2      	lsls	r2, r2, #3
 8000858:	440a      	add	r2, r1
 800085a:	4413      	add	r3, r2
 800085c:	781b      	ldrb	r3, [r3, #0]
	}
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	08002fe8 	.word	0x08002fe8
 8000870:	080031c0 	.word	0x080031c0

08000874 <ili9341_Init>:

#include "ili9341.h"
#include "fonts.h"

void ili9341_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000878:	f7ff fe3a 	bl	80004f0 <LCD_IO_Init>
//  ili9341_WriteData(0x0A);
//  ili9341_WriteData(0x28);
//  ili9341_WriteData(0x2F);
//  ili9341_WriteData(0x0F);

  ili9341_WriteReg(0x01);
 800087c:	2001      	movs	r0, #1
 800087e:	f000 f84b 	bl	8000918 <ili9341_WriteReg>
  HAL_Delay(1000);
 8000882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000886:	f000 ff5d 	bl	8001744 <HAL_Delay>

  ili9341_WriteReg(0xc0);
 800088a:	20c0      	movs	r0, #192	; 0xc0
 800088c:	f000 f844 	bl	8000918 <ili9341_WriteReg>
  ili9341_WriteData(0x25);
 8000890:	2025      	movs	r0, #37	; 0x25
 8000892:	f000 f84e 	bl	8000932 <ili9341_WriteData>

  ili9341_WriteReg(0xc1);
 8000896:	20c1      	movs	r0, #193	; 0xc1
 8000898:	f000 f83e 	bl	8000918 <ili9341_WriteReg>
  ili9341_WriteData(0x11);
 800089c:	2011      	movs	r0, #17
 800089e:	f000 f848 	bl	8000932 <ili9341_WriteData>

  ili9341_WriteReg(0xc5);
 80008a2:	20c5      	movs	r0, #197	; 0xc5
 80008a4:	f000 f838 	bl	8000918 <ili9341_WriteReg>
  ili9341_WriteData(0x2b);
 80008a8:	202b      	movs	r0, #43	; 0x2b
 80008aa:	f000 f842 	bl	8000932 <ili9341_WriteData>
  ili9341_WriteData(0x2b);
 80008ae:	202b      	movs	r0, #43	; 0x2b
 80008b0:	f000 f83f 	bl	8000932 <ili9341_WriteData>

  ili9341_WriteReg(0xc7);
 80008b4:	20c7      	movs	r0, #199	; 0xc7
 80008b6:	f000 f82f 	bl	8000918 <ili9341_WriteReg>
  ili9341_WriteData(0x86);
 80008ba:	2086      	movs	r0, #134	; 0x86
 80008bc:	f000 f839 	bl	8000932 <ili9341_WriteData>

  ili9341_WriteReg(LCD_MAC);
 80008c0:	2036      	movs	r0, #54	; 0x36
 80008c2:	f000 f829 	bl	8000918 <ili9341_WriteReg>
  ili9341_WriteData(0x88);
 80008c6:	2088      	movs	r0, #136	; 0x88
 80008c8:	f000 f833 	bl	8000932 <ili9341_WriteData>

  ili9341_WriteReg(0x3a);
 80008cc:	203a      	movs	r0, #58	; 0x3a
 80008ce:	f000 f823 	bl	8000918 <ili9341_WriteReg>
  ili9341_WriteData(0x55);
 80008d2:	2055      	movs	r0, #85	; 0x55
 80008d4:	f000 f82d 	bl	8000932 <ili9341_WriteData>

  ili9341_WriteReg(0xb1);
 80008d8:	20b1      	movs	r0, #177	; 0xb1
 80008da:	f000 f81d 	bl	8000918 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 f827 	bl	8000932 <ili9341_WriteData>
  ili9341_WriteData(0x18);
 80008e4:	2018      	movs	r0, #24
 80008e6:	f000 f824 	bl	8000932 <ili9341_WriteData>

  ili9341_WriteReg(0xb6);
 80008ea:	20b6      	movs	r0, #182	; 0xb6
 80008ec:	f000 f814 	bl	8000918 <ili9341_WriteReg>
  ili9341_WriteData(0x0a);
 80008f0:	200a      	movs	r0, #10
 80008f2:	f000 f81e 	bl	8000932 <ili9341_WriteData>
  ili9341_WriteData(0x82);
 80008f6:	2082      	movs	r0, #130	; 0x82
 80008f8:	f000 f81b 	bl	8000932 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80008fc:	2027      	movs	r0, #39	; 0x27
 80008fe:	f000 f818 	bl	8000932 <ili9341_WriteData>

  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000902:	2011      	movs	r0, #17
 8000904:	f000 f808 	bl	8000918 <ili9341_WriteReg>
  LCD_Delay(200);
 8000908:	20c8      	movs	r0, #200	; 0xc8
 800090a:	f7ff fead 	bl	8000668 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800090e:	2029      	movs	r0, #41	; 0x29
 8000910:	f000 f802 	bl	8000918 <ili9341_WriteReg>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <ili9341_WriteReg>:
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
}

void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fe7d 	bl	8000624 <LCD_IO_WriteReg>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <ili9341_WriteData>:

void ili9341_WriteData(uint16_t RegValue)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fe4e 	bl	80005e0 <LCD_IO_WriteData>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ili9341_WriteData16>:

void ili9341_WriteData16(uint16_t RegValue) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	LCD_IO_WriteData(RegValue >> 8);
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b29b      	uxth	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fe3f 	bl	80005e0 <LCD_IO_WriteData>
	LCD_IO_WriteData(RegValue & 0xff);
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	b29b      	uxth	r3, r3
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fe39 	bl	80005e0 <LCD_IO_WriteData>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <ili9341_SetCursor>:
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}

void ili9341_SetCursor(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000976:	b590      	push	{r4, r7, lr}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	4604      	mov	r4, r0
 800097e:	4608      	mov	r0, r1
 8000980:	4611      	mov	r1, r2
 8000982:	461a      	mov	r2, r3
 8000984:	4623      	mov	r3, r4
 8000986:	80fb      	strh	r3, [r7, #6]
 8000988:	4603      	mov	r3, r0
 800098a:	80bb      	strh	r3, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
 8000990:	4613      	mov	r3, r2
 8000992:	803b      	strh	r3, [r7, #0]
	ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000994:	202a      	movs	r0, #42	; 0x2a
 8000996:	f7ff ffbf 	bl	8000918 <ili9341_WriteReg>
	ili9341_WriteData(0);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ffc9 	bl	8000932 <ili9341_WriteData>
	ili9341_WriteData(x1);
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ffc5 	bl	8000932 <ili9341_WriteData>
	ili9341_WriteData(0);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff ffc2 	bl	8000932 <ili9341_WriteData>
	ili9341_WriteData(x2);
 80009ae:	887b      	ldrh	r3, [r7, #2]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ffbe 	bl	8000932 <ili9341_WriteData>
	ili9341_WriteReg(LCD_PAGE_ADDR);
 80009b6:	202b      	movs	r0, #43	; 0x2b
 80009b8:	f7ff ffae 	bl	8000918 <ili9341_WriteReg>
	ili9341_WriteData(0);
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff ffb8 	bl	8000932 <ili9341_WriteData>
	ili9341_WriteData(y1);
 80009c2:	88bb      	ldrh	r3, [r7, #4]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ffb4 	bl	8000932 <ili9341_WriteData>
	ili9341_WriteData(0);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff ffb1 	bl	8000932 <ili9341_WriteData>
	ili9341_WriteData(y2);
 80009d0:	883b      	ldrh	r3, [r7, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ffad 	bl	8000932 <ili9341_WriteData>
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd90      	pop	{r4, r7, pc}

080009e0 <ili9341_DrawPixel>:

void ili9341_DrawPixel(uint16_t x, uint16_t y, uint16_t colour) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]
 80009ea:	460b      	mov	r3, r1
 80009ec:	80bb      	strh	r3, [r7, #4]
 80009ee:	4613      	mov	r3, r2
 80009f0:	807b      	strh	r3, [r7, #2]
	ili9341_SetCursor(x, y, x + 1, y + 1);
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	88bb      	ldrh	r3, [r7, #4]
 80009fa:	3301      	adds	r3, #1
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	88b9      	ldrh	r1, [r7, #4]
 8000a00:	88f8      	ldrh	r0, [r7, #6]
 8000a02:	f7ff ffb8 	bl	8000976 <ili9341_SetCursor>
	ili9341_WriteReg(LCD_GRAM);
 8000a06:	202c      	movs	r0, #44	; 0x2c
 8000a08:	f7ff ff86 	bl	8000918 <ili9341_WriteReg>
	ili9341_WriteData16(colour);
 8000a0c:	887b      	ldrh	r3, [r7, #2]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ff9c 	bl	800094c <ili9341_WriteData16>
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <ili9341_WriteChar>:

void ili9341_WriteChar(uint16_t x, uint16_t y, uint16_t colour_text, uint16_t colour_bg, char *text, uint16_t Font) {
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4604      	mov	r4, r0
 8000a24:	4608      	mov	r0, r1
 8000a26:	4611      	mov	r1, r2
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4623      	mov	r3, r4
 8000a2c:	80fb      	strh	r3, [r7, #6]
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80bb      	strh	r3, [r7, #4]
 8000a32:	460b      	mov	r3, r1
 8000a34:	807b      	strh	r3, [r7, #2]
 8000a36:	4613      	mov	r3, r2
 8000a38:	803b      	strh	r3, [r7, #0]
	font *sfont = Font_GetFont(Font);
 8000a3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff febc 	bl	80007bc <Font_GetFont>
 8000a44:	6138      	str	r0, [r7, #16]
	uint16_t LetterX = x;
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	83fb      	strh	r3, [r7, #30]
	uint16_t LetterY = y;
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	81fb      	strh	r3, [r7, #14]
	uint16_t index = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	83bb      	strh	r3, [r7, #28]
	while(text[index] != 0) {
 8000a52:	e05c      	b.n	8000b0e <ili9341_WriteChar+0xf2>
		ili9341_SetCursor(LetterX, LetterY, LetterX + sfont-> width, LetterY + sfont -> height);
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	795b      	ldrb	r3, [r3, #5]
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	8bfb      	ldrh	r3, [r7, #30]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b29c      	uxth	r4, r3
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	791b      	ldrb	r3, [r3, #4]
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	4413      	add	r3, r2
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	89f9      	ldrh	r1, [r7, #14]
 8000a6e:	8bf8      	ldrh	r0, [r7, #30]
 8000a70:	4622      	mov	r2, r4
 8000a72:	f7ff ff80 	bl	8000976 <ili9341_SetCursor>
		ili9341_WriteReg(LCD_GRAM);
 8000a76:	202c      	movs	r0, #44	; 0x2c
 8000a78:	f7ff ff4e 	bl	8000918 <ili9341_WriteReg>
		for(int height = 0; height < sfont->height; height++) {
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	e034      	b.n	8000aec <ili9341_WriteChar+0xd0>
			uint8_t Page = Font_GetPage(Font, text[index], height);
 8000a82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000a84:	b2d8      	uxtb	r0, r3
 8000a86:	8bbb      	ldrh	r3, [r7, #28]
 8000a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	4619      	mov	r1, r3
 8000a94:	f7ff feb4 	bl	8000800 <Font_GetPage>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	737b      	strb	r3, [r7, #13]
				for(int width = 0; width < sfont->width + 1; width++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e01b      	b.n	8000ada <ili9341_WriteChar+0xbe>
					switch( (Page>> (sfont->width - width)) & 1 ) {
 8000aa2:	7b7a      	ldrb	r2, [r7, #13]
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	795b      	ldrb	r3, [r3, #5]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	1acb      	subs	r3, r1, r3
 8000aae:	fa42 f303 	asr.w	r3, r2, r3
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <ili9341_WriteChar+0xa4>
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d005      	beq.n	8000aca <ili9341_WriteChar+0xae>
 8000abe:	e009      	b.n	8000ad4 <ili9341_WriteChar+0xb8>
					case 0:
						ili9341_WriteData16(colour_bg);
 8000ac0:	883b      	ldrh	r3, [r7, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff42 	bl	800094c <ili9341_WriteData16>
						break;
 8000ac8:	e004      	b.n	8000ad4 <ili9341_WriteChar+0xb8>
					case 1:
						ili9341_WriteData16(colour_text);
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff3d 	bl	800094c <ili9341_WriteData16>
						break;
 8000ad2:	bf00      	nop
				for(int width = 0; width < sfont->width + 1; width++) {
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	795b      	ldrb	r3, [r3, #5]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	dddd      	ble.n	8000aa2 <ili9341_WriteChar+0x86>
		for(int height = 0; height < sfont->height; height++) {
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	461a      	mov	r2, r3
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	4293      	cmp	r3, r2
 8000af6:	dbc4      	blt.n	8000a82 <ili9341_WriteChar+0x66>
					}
				}

		}
		LetterX += sfont->width + 1;
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	795b      	ldrb	r3, [r3, #5]
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	8bfb      	ldrh	r3, [r7, #30]
 8000b00:	4413      	add	r3, r2
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	3301      	adds	r3, #1
 8000b06:	83fb      	strh	r3, [r7, #30]
		index++;
 8000b08:	8bbb      	ldrh	r3, [r7, #28]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	83bb      	strh	r3, [r7, #28]
	while(text[index] != 0) {
 8000b0e:	8bbb      	ldrh	r3, [r7, #28]
 8000b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b12:	4413      	add	r3, r2
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d19c      	bne.n	8000a54 <ili9341_WriteChar+0x38>
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
 8000b1e:	3724      	adds	r7, #36	; 0x24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd90      	pop	{r4, r7, pc}

08000b24 <ili9341_WriteChar2>:

void ili9341_WriteChar2(uint16_t x, uint16_t y, uint16_t colour_text, uint16_t colour_bg, char *text, uint16_t Font) {
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	4608      	mov	r0, r1
 8000b2e:	4611      	mov	r1, r2
 8000b30:	461a      	mov	r2, r3
 8000b32:	4623      	mov	r3, r4
 8000b34:	80fb      	strh	r3, [r7, #6]
 8000b36:	4603      	mov	r3, r0
 8000b38:	80bb      	strh	r3, [r7, #4]
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	807b      	strh	r3, [r7, #2]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	803b      	strh	r3, [r7, #0]
	font *sfont = Font_GetFont(Font);
 8000b42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fe38 	bl	80007bc <Font_GetFont>
 8000b4c:	6138      	str	r0, [r7, #16]
	uint16_t LetterX = x;
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	83fb      	strh	r3, [r7, #30]
	uint16_t LetterY = y;
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	81fb      	strh	r3, [r7, #14]
	uint16_t index = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	83bb      	strh	r3, [r7, #28]
	while(text[index] != 0) {
 8000b5a:	e05e      	b.n	8000c1a <ili9341_WriteChar2+0xf6>
		ili9341_SetCursor(LetterX, LetterY, LetterX + sfont->width, LetterY + sfont->height);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	795b      	ldrb	r3, [r3, #5]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	8bfb      	ldrh	r3, [r7, #30]
 8000b64:	4413      	add	r3, r2
 8000b66:	b29c      	uxth	r4, r3
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	791b      	ldrb	r3, [r3, #4]
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	4413      	add	r3, r2
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	89f9      	ldrh	r1, [r7, #14]
 8000b76:	8bf8      	ldrh	r0, [r7, #30]
 8000b78:	4622      	mov	r2, r4
 8000b7a:	f7ff fefc 	bl	8000976 <ili9341_SetCursor>
		ili9341_WriteReg(LCD_GRAM);
 8000b7e:	202c      	movs	r0, #44	; 0x2c
 8000b80:	f7ff feca 	bl	8000918 <ili9341_WriteReg>
		for(int height = 0; height < sfont->height; height++) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	e036      	b.n	8000bf8 <ili9341_WriteChar2+0xd4>
			for(int width = 0; width < sfont->width + 1; width++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e02a      	b.n	8000be6 <ili9341_WriteChar2+0xc2>
				switch(( sfont->ascii[((text[index] - 32) * sfont->height) + height] >> (sfont->width - width)) & 1 ) {
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	8bba      	ldrh	r2, [r7, #28]
 8000b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000b98:	440a      	add	r2, r1
 8000b9a:	7812      	ldrb	r2, [r2, #0]
 8000b9c:	3a20      	subs	r2, #32
 8000b9e:	6939      	ldr	r1, [r7, #16]
 8000ba0:	7909      	ldrb	r1, [r1, #4]
 8000ba2:	fb02 f101 	mul.w	r1, r2, r1
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	440a      	add	r2, r1
 8000baa:	4413      	add	r3, r2
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	795b      	ldrb	r3, [r3, #5]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	1acb      	subs	r3, r1, r3
 8000bba:	fa42 f303 	asr.w	r3, r2, r3
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <ili9341_WriteChar2+0xa8>
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d005      	beq.n	8000bd6 <ili9341_WriteChar2+0xb2>
 8000bca:	e009      	b.n	8000be0 <ili9341_WriteChar2+0xbc>
				case 0:
					ili9341_WriteData16(colour_bg);
 8000bcc:	883b      	ldrh	r3, [r7, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff febc 	bl	800094c <ili9341_WriteData16>
					break;
 8000bd4:	e004      	b.n	8000be0 <ili9341_WriteChar2+0xbc>
				case 1:
					ili9341_WriteData16(colour_text);
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff feb7 	bl	800094c <ili9341_WriteData16>
					break;
 8000bde:	bf00      	nop
			for(int width = 0; width < sfont->width + 1; width++) {
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3301      	adds	r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	795b      	ldrb	r3, [r3, #5]
 8000bea:	461a      	mov	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	ddce      	ble.n	8000b90 <ili9341_WriteChar2+0x6c>
		for(int height = 0; height < sfont->height; height++) {
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	791b      	ldrb	r3, [r3, #4]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	4293      	cmp	r3, r2
 8000c02:	dbc2      	blt.n	8000b8a <ili9341_WriteChar2+0x66>
				}
			}
		}
		LetterX += sfont->width + 1;
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	795b      	ldrb	r3, [r3, #5]
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	8bfb      	ldrh	r3, [r7, #30]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	3301      	adds	r3, #1
 8000c12:	83fb      	strh	r3, [r7, #30]
		index++;
 8000c14:	8bbb      	ldrh	r3, [r7, #28]
 8000c16:	3301      	adds	r3, #1
 8000c18:	83bb      	strh	r3, [r7, #28]
	while(text[index] != 0) {
 8000c1a:	8bbb      	ldrh	r3, [r7, #28]
 8000c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c1e:	4413      	add	r3, r2
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d19a      	bne.n	8000b5c <ili9341_WriteChar2+0x38>
	}
}
 8000c26:	bf00      	nop
 8000c28:	bf00      	nop
 8000c2a:	3724      	adds	r7, #36	; 0x24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd90      	pop	{r4, r7, pc}

08000c30 <ili9341_DrawCube>:

void ili9341_DrawCube(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t colour) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4604      	mov	r4, r0
 8000c38:	4608      	mov	r0, r1
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4623      	mov	r3, r4
 8000c40:	80fb      	strh	r3, [r7, #6]
 8000c42:	4603      	mov	r3, r0
 8000c44:	80bb      	strh	r3, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	807b      	strh	r3, [r7, #2]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	803b      	strh	r3, [r7, #0]
	ili9341_SetCursor(x1, y1, x2, y2);
 8000c4e:	883b      	ldrh	r3, [r7, #0]
 8000c50:	887a      	ldrh	r2, [r7, #2]
 8000c52:	88b9      	ldrh	r1, [r7, #4]
 8000c54:	88f8      	ldrh	r0, [r7, #6]
 8000c56:	f7ff fe8e 	bl	8000976 <ili9341_SetCursor>
	ili9341_WriteReg(LCD_GRAM);
 8000c5a:	202c      	movs	r0, #44	; 0x2c
 8000c5c:	f7ff fe5c 	bl	8000918 <ili9341_WriteReg>
	for(int i = 0; i < (x2 - x1) * (y2 - y1); i++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e006      	b.n	8000c74 <ili9341_DrawCube+0x44>
		ili9341_WriteData16(colour);
 8000c66:	8c3b      	ldrh	r3, [r7, #32]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fe6f 	bl	800094c <ili9341_WriteData16>
	for(int i = 0; i < (x2 - x1) * (y2 - y1); i++) {
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	3301      	adds	r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	887a      	ldrh	r2, [r7, #2]
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	8839      	ldrh	r1, [r7, #0]
 8000c7c:	88ba      	ldrh	r2, [r7, #4]
 8000c7e:	1a8a      	subs	r2, r1, r2
 8000c80:	fb02 f303 	mul.w	r3, r2, r3
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	dbed      	blt.n	8000c66 <ili9341_DrawCube+0x36>
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <ili9341_MainDraw>:

void ili9341_MainDraw(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af04      	add	r7, sp, #16
	ili9341_DrawTriangle(10, 10, 20, 20, 10, 30, ILI9341_COLOR_RED);
 8000c9a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c9e:	9302      	str	r3, [sp, #8]
 8000ca0:	231e      	movs	r3, #30
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2314      	movs	r3, #20
 8000caa:	2214      	movs	r2, #20
 8000cac:	210a      	movs	r1, #10
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f000 fa28 	bl	8001104 <ili9341_DrawTriangle>
	ili9341_DrawTriangle(30, 30, 100, 40, 50, 100, ILI9341_COLOR_YELLOW);
 8000cb4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000cb8:	9302      	str	r3, [sp, #8]
 8000cba:	2364      	movs	r3, #100	; 0x64
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	2332      	movs	r3, #50	; 0x32
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2328      	movs	r3, #40	; 0x28
 8000cc4:	2264      	movs	r2, #100	; 0x64
 8000cc6:	211e      	movs	r1, #30
 8000cc8:	201e      	movs	r0, #30
 8000cca:	f000 fa1b 	bl	8001104 <ili9341_DrawTriangle>
	ili9341_DrawTriangle(120, 40, 230, 190, 100, 100, ILI9341_COLOR_GREEN);
 8000cce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000cd2:	9302      	str	r3, [sp, #8]
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	23be      	movs	r3, #190	; 0xbe
 8000cde:	22e6      	movs	r2, #230	; 0xe6
 8000ce0:	2128      	movs	r1, #40	; 0x28
 8000ce2:	2078      	movs	r0, #120	; 0x78
 8000ce4:	f000 fa0e 	bl	8001104 <ili9341_DrawTriangle>
	ili9341_DrawTriangle(150, 10, 220, 50, 200, 100, ILI9341_COLOR_BLUE);
 8000ce8:	231f      	movs	r3, #31
 8000cea:	9302      	str	r3, [sp, #8]
 8000cec:	2364      	movs	r3, #100	; 0x64
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	23c8      	movs	r3, #200	; 0xc8
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2332      	movs	r3, #50	; 0x32
 8000cf6:	22dc      	movs	r2, #220	; 0xdc
 8000cf8:	210a      	movs	r1, #10
 8000cfa:	2096      	movs	r0, #150	; 0x96
 8000cfc:	f000 fa02 	bl	8001104 <ili9341_DrawTriangle>
//	ili9341_DrawCircle(100, 200, 10, ILI9341_COLOR_WHITE);
	Pixel_circle(30, 30, 10, 10, ILI9341_COLOR_YELLOW);
 8000d00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	230a      	movs	r3, #10
 8000d08:	220a      	movs	r2, #10
 8000d0a:	211e      	movs	r1, #30
 8000d0c:	201e      	movs	r0, #30
 8000d0e:	f000 fa27 	bl	8001160 <Pixel_circle>

	HAL_Delay(10000);
 8000d12:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d16:	f000 fd15 	bl	8001744 <HAL_Delay>
	ili9341_WriteChar(0, 00, ILI9341_COLOR_BLACK, ILI9341_COLOR_WHITE, " !#$%&'()*+,-./0123456789:;<=>?@ABCDEFG", FONT8);
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	4b82      	ldr	r3, [pc, #520]	; (8000f28 <ili9341_MainDraw+0x294>)
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff fe76 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0, 10, ILI9341_COLOR_BLACK, ILI9341_COLOR_WHITE, "HIJKLMNOPQRSTUVWXYZ", FONT8);
 8000d30:	2300      	movs	r3, #0
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	4b7d      	ldr	r3, [pc, #500]	; (8000f2c <ili9341_MainDraw+0x298>)
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	210a      	movs	r1, #10
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff fe6b 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0, 22, ILI9341_COLOR_BLACK, ILI9341_COLOR_WHITE, " !$%&'()* !$%&'()* !$%&'()*", FONT12);
 8000d46:	2301      	movs	r3, #1
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	4b79      	ldr	r3, [pc, #484]	; (8000f30 <ili9341_MainDraw+0x29c>)
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d52:	2200      	movs	r2, #0
 8000d54:	2116      	movs	r1, #22
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fe60 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar2(0, 40, ILI9341_COLOR_BLACK, ILI9341_COLOR_WHITE, " !# !#  !////////", FONT7);
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	4b74      	ldr	r3, [pc, #464]	; (8000f34 <ili9341_MainDraw+0x2a0>)
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2128      	movs	r1, #40	; 0x28
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff fed9 	bl	8000b24 <ili9341_WriteChar2>
	HAL_Delay(10000);
 8000d72:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d76:	f000 fce5 	bl	8001744 <HAL_Delay>
	ili9341_WriteChar(0,   0, ILI9341_COLOR_WHITE,   ILI9341_COLOR_BLACK, "WHITEWHITEWHITEWHITEWHITEWHITEWHITEWHITE", FONT8);
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	4b6e      	ldr	r3, [pc, #440]	; (8000f38 <ili9341_MainDraw+0x2a4>)
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2300      	movs	r3, #0
 8000d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff fe46 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0,  10, ILI9341_COLOR_BLACK,   ILI9341_COLOR_WHITE, "BLACKBLACKBLACKBLACKBLACKBLACKBLACKBLACK", FONT8);
 8000d90:	2300      	movs	r3, #0
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	4b69      	ldr	r3, [pc, #420]	; (8000f3c <ili9341_MainDraw+0x2a8>)
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	210a      	movs	r1, #10
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff fe3b 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0,  20, ILI9341_COLOR_RED,     ILI9341_COLOR_WHITE, "REDREDREDREDREDREDREDREDREDREDREDREDREDR", FONT8);
 8000da6:	2300      	movs	r3, #0
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	4b65      	ldr	r3, [pc, #404]	; (8000f40 <ili9341_MainDraw+0x2ac>)
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000db2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000db6:	2114      	movs	r1, #20
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff fe2f 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0,  30, ILI9341_COLOR_GREEN,   ILI9341_COLOR_WHITE, "GREENGREENGREENGREENGREENGREENGREENGREEN", FONT8);
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	4b60      	ldr	r3, [pc, #384]	; (8000f44 <ili9341_MainDraw+0x2b0>)
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000dce:	211e      	movs	r1, #30
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff fe23 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0,  40, ILI9341_COLOR_GREEN2,  ILI9341_COLOR_WHITE, "GREEN2GREEN2GREEN2GREEN2GREEN2GREEN2GREE", FONT8);
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	4b5b      	ldr	r3, [pc, #364]	; (8000f48 <ili9341_MainDraw+0x2b4>)
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de2:	f24b 7223 	movw	r2, #46883	; 0xb723
 8000de6:	2128      	movs	r1, #40	; 0x28
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff fe17 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0,  50, ILI9341_COLOR_BLUE,    ILI9341_COLOR_WHITE, "BLUEBLUEBLUEBLUEBLUEBLUEBLUEBLUEBLUEBLUE", FONT8);
 8000dee:	2300      	movs	r3, #0
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	4b56      	ldr	r3, [pc, #344]	; (8000f4c <ili9341_MainDraw+0x2b8>)
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dfa:	221f      	movs	r2, #31
 8000dfc:	2132      	movs	r1, #50	; 0x32
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff fe0c 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0,  60, ILI9341_COLOR_BLUE2,   ILI9341_COLOR_WHITE, "BLUE2BLUE2BLUE2BLUE2BLUE2BLUE2BLUE2BLUE2", FONT8);
 8000e04:	2300      	movs	r3, #0
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	4b51      	ldr	r3, [pc, #324]	; (8000f50 <ili9341_MainDraw+0x2bc>)
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e10:	f240 521d 	movw	r2, #1309	; 0x51d
 8000e14:	213c      	movs	r1, #60	; 0x3c
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fe00 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0,  70, ILI9341_COLOR_YELLOW,  ILI9341_COLOR_BLACK, "YELLOWYELLOWYELLOWYELLOWYELLOWYELLOWYELL", FONT8);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	4b4c      	ldr	r3, [pc, #304]	; (8000f54 <ili9341_MainDraw+0x2c0>)
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2300      	movs	r3, #0
 8000e26:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000e2a:	2146      	movs	r1, #70	; 0x46
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff fdf5 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0,  80, ILI9341_COLOR_ORANGE,  ILI9341_COLOR_WHITE, "ORANGEORANGEORANGEORANGEORANGEORANGEORAN", FONT8);
 8000e32:	2300      	movs	r3, #0
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	4b48      	ldr	r3, [pc, #288]	; (8000f58 <ili9341_MainDraw+0x2c4>)
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e3e:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 8000e42:	2150      	movs	r1, #80	; 0x50
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff fde9 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0,  90, ILI9341_COLOR_CYAN,    ILI9341_COLOR_BLACK, "CYANCYANCYANCYANCYANCYANCYANCYANCYANCYAN", FONT8);
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <ili9341_MainDraw+0x2c8>)
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000e58:	215a      	movs	r1, #90	; 0x5a
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff fdde 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0, 100, ILI9341_COLOR_MAGENTA, ILI9341_COLOR_WHITE, "MAGENTAMAGENTAMAGENTAMAGENTAMAGENTAMAGEN", FONT8);
 8000e60:	2300      	movs	r3, #0
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	4b3e      	ldr	r3, [pc, #248]	; (8000f60 <ili9341_MainDraw+0x2cc>)
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e6c:	f24a 2254 	movw	r2, #41556	; 0xa254
 8000e70:	2164      	movs	r1, #100	; 0x64
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff fdd2 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0, 110, ILI9341_COLOR_GRAY,    ILI9341_COLOR_WHITE, "GRAYGRAYGRAYGRAYGRAYGRAYGRAYGRAYGRAYGRAY", FONT8);
 8000e78:	2300      	movs	r3, #0
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	4b39      	ldr	r3, [pc, #228]	; (8000f64 <ili9341_MainDraw+0x2d0>)
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e84:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8000e88:	216e      	movs	r1, #110	; 0x6e
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fdc6 	bl	8000a1c <ili9341_WriteChar>
	ili9341_WriteChar(0, 120, ILI9341_COLOR_BROWN,   ILI9341_COLOR_WHITE, "BROWNBROWNBROWNBROWNBROWNBROWNBROWNBROWN", FONT8);
 8000e90:	2300      	movs	r3, #0
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <ili9341_MainDraw+0x2d4>)
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e9c:	f64b 32ca 	movw	r2, #48074	; 0xbbca
 8000ea0:	2178      	movs	r1, #120	; 0x78
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff fdba 	bl	8000a1c <ili9341_WriteChar>
	HAL_Delay(10000);
 8000ea8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000eac:	f000 fc4a 	bl	8001744 <HAL_Delay>
	ili9341_Print(1365);
 8000eb0:	f240 5055 	movw	r0, #1365	; 0x555
 8000eb4:	f000 f890 	bl	8000fd8 <ili9341_Print>
	HAL_Delay(1000);
 8000eb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ebc:	f000 fc42 	bl	8001744 <HAL_Delay>
	for(uint16_t rgb = 0; rgb < 0xffff; rgb+= 113) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	80fb      	strh	r3, [r7, #6]
 8000ec4:	e026      	b.n	8000f14 <ili9341_MainDraw+0x280>
		static uint8_t pg = 0;
		static uint8_t cl = 0;
		ili9341_DrawChank(cl, pg, rgb);
 8000ec6:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <ili9341_MainDraw+0x2d8>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4a28      	ldr	r2, [pc, #160]	; (8000f70 <ili9341_MainDraw+0x2dc>)
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	b291      	uxth	r1, r2
 8000ed2:	88fa      	ldrh	r2, [r7, #6]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f84d 	bl	8000f74 <ili9341_DrawChank>
		cl+= 1;
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <ili9341_MainDraw+0x2d8>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <ili9341_MainDraw+0x2d8>)
 8000ee4:	701a      	strb	r2, [r3, #0]
		if (cl == 24) { cl = 0; pg+= 1;}
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <ili9341_MainDraw+0x2d8>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b18      	cmp	r3, #24
 8000eec:	d108      	bne.n	8000f00 <ili9341_MainDraw+0x26c>
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <ili9341_MainDraw+0x2d8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <ili9341_MainDraw+0x2dc>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <ili9341_MainDraw+0x2dc>)
 8000efe:	701a      	strb	r2, [r3, #0]
		if (pg == 24) { pg = 0; }
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <ili9341_MainDraw+0x2dc>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b18      	cmp	r3, #24
 8000f06:	d102      	bne.n	8000f0e <ili9341_MainDraw+0x27a>
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <ili9341_MainDraw+0x2dc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
	for(uint16_t rgb = 0; rgb < 0xffff; rgb+= 113) {
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	3371      	adds	r3, #113	; 0x71
 8000f12:	80fb      	strh	r3, [r7, #6]
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d1d3      	bne.n	8000ec6 <ili9341_MainDraw+0x232>
	}
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	08002d40 	.word	0x08002d40
 8000f2c:	08002d68 	.word	0x08002d68
 8000f30:	08002d7c 	.word	0x08002d7c
 8000f34:	08002d98 	.word	0x08002d98
 8000f38:	08002dac 	.word	0x08002dac
 8000f3c:	08002dd8 	.word	0x08002dd8
 8000f40:	08002e04 	.word	0x08002e04
 8000f44:	08002e30 	.word	0x08002e30
 8000f48:	08002e5c 	.word	0x08002e5c
 8000f4c:	08002e88 	.word	0x08002e88
 8000f50:	08002eb4 	.word	0x08002eb4
 8000f54:	08002ee0 	.word	0x08002ee0
 8000f58:	08002f0c 	.word	0x08002f0c
 8000f5c:	08002f38 	.word	0x08002f38
 8000f60:	08002f64 	.word	0x08002f64
 8000f64:	08002f90 	.word	0x08002f90
 8000f68:	08002fbc 	.word	0x08002fbc
 8000f6c:	2000009d 	.word	0x2000009d
 8000f70:	2000009e 	.word	0x2000009e

08000f74 <ili9341_DrawChank>:

void ili9341_DrawChank(uint16_t chankX, uint16_t chankY, uint16_t color) {
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	80bb      	strh	r3, [r7, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	807b      	strh	r3, [r7, #2]
	ili9341_DrawCube(chankX * 10, chankY * 10, ((chankX + 1) * 10) + 1, ((chankY + 1) * 10) + 1, color);
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	b298      	uxth	r0, r3
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	461a      	mov	r2, r3
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	b299      	uxth	r1, r3
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	461c      	mov	r4, r3
 8000fba:	00a4      	lsls	r4, r4, #2
 8000fbc:	4423      	add	r3, r4
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b29c      	uxth	r4, r3
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	4623      	mov	r3, r4
 8000fcc:	f7ff fe30 	bl	8000c30 <ili9341_DrawCube>
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd90      	pop	{r4, r7, pc}

08000fd8 <ili9341_Print>:

void ili9341_Print(uint16_t seed) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < 24; i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	e01a      	b.n	800101e <ili9341_Print+0x46>
		for (int j = 0; j < 24; j++) {
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	e011      	b.n	8001012 <ili9341_Print+0x3a>
			ili9341_DrawChank(j, i, (j + i) * seed);
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	b298      	uxth	r0, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	88fa      	ldrh	r2, [r7, #6]
 8001000:	fb12 f303 	smulbb	r3, r2, r3
 8001004:	b29b      	uxth	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	f7ff ffb4 	bl	8000f74 <ili9341_DrawChank>
		for (int j = 0; j < 24; j++) {
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	3301      	adds	r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2b17      	cmp	r3, #23
 8001016:	ddea      	ble.n	8000fee <ili9341_Print+0x16>
	for(int i = 0; i < 24; i++) {
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b17      	cmp	r3, #23
 8001022:	dde1      	ble.n	8000fe8 <ili9341_Print+0x10>
		}
	}
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <ili9341_DrawLine>:

void ili9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t colour) {
 800102e:	b590      	push	{r4, r7, lr}
 8001030:	b08b      	sub	sp, #44	; 0x2c
 8001032:	af00      	add	r7, sp, #0
 8001034:	4604      	mov	r4, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4611      	mov	r1, r2
 800103a:	461a      	mov	r2, r3
 800103c:	4623      	mov	r3, r4
 800103e:	80fb      	strh	r3, [r7, #6]
 8001040:	4603      	mov	r3, r0
 8001042:	80bb      	strh	r3, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	803b      	strh	r3, [r7, #0]
	int x = x1-x0;
 800104c:	887a      	ldrh	r2, [r7, #2]
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	623b      	str	r3, [r7, #32]
	int y = y1-y0;
 8001054:	883a      	ldrh	r2, [r7, #0]
 8001056:	88bb      	ldrh	r3, [r7, #4]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	61fb      	str	r3, [r7, #28]
	int dx = abs(x), sx = x0<x1 ? 1 : -1;
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	2b00      	cmp	r3, #0
 8001060:	bfb8      	it	lt
 8001062:	425b      	neglt	r3, r3
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	88fa      	ldrh	r2, [r7, #6]
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	429a      	cmp	r2, r3
 800106c:	d201      	bcs.n	8001072 <ili9341_DrawLine+0x44>
 800106e:	2301      	movs	r3, #1
 8001070:	e001      	b.n	8001076 <ili9341_DrawLine+0x48>
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	617b      	str	r3, [r7, #20]
	int dy = -abs(y), sy = y0<y1 ? 1 : -1;
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	2b00      	cmp	r3, #0
 800107c:	bfb8      	it	lt
 800107e:	425b      	neglt	r3, r3
 8001080:	425b      	negs	r3, r3
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	88ba      	ldrh	r2, [r7, #4]
 8001086:	883b      	ldrh	r3, [r7, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d201      	bcs.n	8001090 <ili9341_DrawLine+0x62>
 800108c:	2301      	movs	r3, #1
 800108e:	e001      	b.n	8001094 <ili9341_DrawLine+0x66>
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	60fb      	str	r3, [r7, #12]
	int err = dx+dy, e2;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4413      	add	r3, r2
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
	for (;;){
		ili9341_DrawPixel(x0, y0, colour);
 800109e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010a0:	88b9      	ldrh	r1, [r7, #4]
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fc9b 	bl	80009e0 <ili9341_DrawPixel>
		e2 = 2*err;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
		if (e2 >= dy) {
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	db0c      	blt.n	80010d2 <ili9341_DrawLine+0xa4>
			if (x0 == x1) break;
 80010b8:	88fa      	ldrh	r2, [r7, #6]
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d01a      	beq.n	80010f6 <ili9341_DrawLine+0xc8>
			err += dy; x0 += sx;
 80010c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4413      	add	r3, r2
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	4413      	add	r3, r2
 80010d0:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 <= dx) {
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dce1      	bgt.n	800109e <ili9341_DrawLine+0x70>
			if (y0 == y1) break;
 80010da:	88ba      	ldrh	r2, [r7, #4]
 80010dc:	883b      	ldrh	r3, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d00b      	beq.n	80010fa <ili9341_DrawLine+0xcc>
			err += dx; y0 += sy;
 80010e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	4413      	add	r3, r2
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	88bb      	ldrh	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	80bb      	strh	r3, [r7, #4]
		ili9341_DrawPixel(x0, y0, colour);
 80010f4:	e7d3      	b.n	800109e <ili9341_DrawLine+0x70>
			if (x0 == x1) break;
 80010f6:	bf00      	nop
 80010f8:	e000      	b.n	80010fc <ili9341_DrawLine+0xce>
			if (y0 == y1) break;
 80010fa:	bf00      	nop
		}
	}
}
 80010fc:	bf00      	nop
 80010fe:	372c      	adds	r7, #44	; 0x2c
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}

08001104 <ili9341_DrawTriangle>:

void ili9341_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t colour) {
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b085      	sub	sp, #20
 8001108:	af02      	add	r7, sp, #8
 800110a:	4604      	mov	r4, r0
 800110c:	4608      	mov	r0, r1
 800110e:	4611      	mov	r1, r2
 8001110:	461a      	mov	r2, r3
 8001112:	4623      	mov	r3, r4
 8001114:	80fb      	strh	r3, [r7, #6]
 8001116:	4603      	mov	r3, r0
 8001118:	80bb      	strh	r3, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	807b      	strh	r3, [r7, #2]
 800111e:	4613      	mov	r3, r2
 8001120:	803b      	strh	r3, [r7, #0]
	ili9341_DrawLine(x1, y1, x2, y2, colour);
 8001122:	883c      	ldrh	r4, [r7, #0]
 8001124:	887a      	ldrh	r2, [r7, #2]
 8001126:	88b9      	ldrh	r1, [r7, #4]
 8001128:	88f8      	ldrh	r0, [r7, #6]
 800112a:	8c3b      	ldrh	r3, [r7, #32]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	4623      	mov	r3, r4
 8001130:	f7ff ff7d 	bl	800102e <ili9341_DrawLine>
	ili9341_DrawLine(x2, y2, x3, y3, colour);
 8001134:	8bbc      	ldrh	r4, [r7, #28]
 8001136:	8b3a      	ldrh	r2, [r7, #24]
 8001138:	8839      	ldrh	r1, [r7, #0]
 800113a:	8878      	ldrh	r0, [r7, #2]
 800113c:	8c3b      	ldrh	r3, [r7, #32]
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	4623      	mov	r3, r4
 8001142:	f7ff ff74 	bl	800102e <ili9341_DrawLine>
	ili9341_DrawLine(x3, y3, x1, y1, colour);
 8001146:	88bc      	ldrh	r4, [r7, #4]
 8001148:	88fa      	ldrh	r2, [r7, #6]
 800114a:	8bb9      	ldrh	r1, [r7, #28]
 800114c:	8b38      	ldrh	r0, [r7, #24]
 800114e:	8c3b      	ldrh	r3, [r7, #32]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	4623      	mov	r3, r4
 8001154:	f7ff ff6b 	bl	800102e <ili9341_DrawLine>
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}

08001160 <Pixel_circle>:
	}
}

static void Pixel_circle (xc, yc, x, y, pixel)
uint16_t  xc, yc, x, y, pixel;
{
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	4605      	mov	r5, r0
 8001168:	460c      	mov	r4, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001170:	462a      	mov	r2, r5
 8001172:	82ba      	strh	r2, [r7, #20]
 8001174:	4622      	mov	r2, r4
 8001176:	823a      	strh	r2, [r7, #16]
 8001178:	4602      	mov	r2, r0
 800117a:	81ba      	strh	r2, [r7, #12]
 800117c:	460a      	mov	r2, r1
 800117e:	813a      	strh	r2, [r7, #8]
 8001180:	80bb      	strh	r3, [r7, #4]
	ili9341_DrawPixel(xc+x, yc+y, pixel);
 8001182:	8aba      	ldrh	r2, [r7, #20]
 8001184:	89bb      	ldrh	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	b298      	uxth	r0, r3
 800118a:	8a3a      	ldrh	r2, [r7, #16]
 800118c:	893b      	ldrh	r3, [r7, #8]
 800118e:	4413      	add	r3, r2
 8001190:	b29b      	uxth	r3, r3
 8001192:	88ba      	ldrh	r2, [r7, #4]
 8001194:	4619      	mov	r1, r3
 8001196:	f7ff fc23 	bl	80009e0 <ili9341_DrawPixel>
	ili9341_DrawPixel(xc+y, yc+x, pixel);
 800119a:	8aba      	ldrh	r2, [r7, #20]
 800119c:	893b      	ldrh	r3, [r7, #8]
 800119e:	4413      	add	r3, r2
 80011a0:	b298      	uxth	r0, r3
 80011a2:	8a3a      	ldrh	r2, [r7, #16]
 80011a4:	89bb      	ldrh	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	88ba      	ldrh	r2, [r7, #4]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fc17 	bl	80009e0 <ili9341_DrawPixel>
	ili9341_DrawPixel(xc+y, yc-x, pixel);
 80011b2:	8aba      	ldrh	r2, [r7, #20]
 80011b4:	893b      	ldrh	r3, [r7, #8]
 80011b6:	4413      	add	r3, r2
 80011b8:	b298      	uxth	r0, r3
 80011ba:	8a3a      	ldrh	r2, [r7, #16]
 80011bc:	89bb      	ldrh	r3, [r7, #12]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	88ba      	ldrh	r2, [r7, #4]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fc0b 	bl	80009e0 <ili9341_DrawPixel>
	ili9341_DrawPixel(xc+x, yc-y, pixel);
 80011ca:	8aba      	ldrh	r2, [r7, #20]
 80011cc:	89bb      	ldrh	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	b298      	uxth	r0, r3
 80011d2:	8a3a      	ldrh	r2, [r7, #16]
 80011d4:	893b      	ldrh	r3, [r7, #8]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	b29b      	uxth	r3, r3
 80011da:	88ba      	ldrh	r2, [r7, #4]
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fbff 	bl	80009e0 <ili9341_DrawPixel>
	ili9341_DrawPixel(xc-x, yc-y, pixel);
 80011e2:	8aba      	ldrh	r2, [r7, #20]
 80011e4:	89bb      	ldrh	r3, [r7, #12]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	b298      	uxth	r0, r3
 80011ea:	8a3a      	ldrh	r2, [r7, #16]
 80011ec:	893b      	ldrh	r3, [r7, #8]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	88ba      	ldrh	r2, [r7, #4]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fbf3 	bl	80009e0 <ili9341_DrawPixel>
	ili9341_DrawPixel(xc-y, yc-x, pixel);
 80011fa:	8aba      	ldrh	r2, [r7, #20]
 80011fc:	893b      	ldrh	r3, [r7, #8]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	b298      	uxth	r0, r3
 8001202:	8a3a      	ldrh	r2, [r7, #16]
 8001204:	89bb      	ldrh	r3, [r7, #12]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	b29b      	uxth	r3, r3
 800120a:	88ba      	ldrh	r2, [r7, #4]
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fbe7 	bl	80009e0 <ili9341_DrawPixel>
	ili9341_DrawPixel(xc-y, yc+x, pixel);
 8001212:	8aba      	ldrh	r2, [r7, #20]
 8001214:	893b      	ldrh	r3, [r7, #8]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b298      	uxth	r0, r3
 800121a:	8a3a      	ldrh	r2, [r7, #16]
 800121c:	89bb      	ldrh	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	b29b      	uxth	r3, r3
 8001222:	88ba      	ldrh	r2, [r7, #4]
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fbdb 	bl	80009e0 <ili9341_DrawPixel>
	ili9341_DrawPixel(xc-x, yc+y, pixel);
 800122a:	8aba      	ldrh	r2, [r7, #20]
 800122c:	89bb      	ldrh	r3, [r7, #12]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	b298      	uxth	r0, r3
 8001232:	8a3a      	ldrh	r2, [r7, #16]
 8001234:	893b      	ldrh	r3, [r7, #8]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	88ba      	ldrh	r2, [r7, #4]
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fbcf 	bl	80009e0 <ili9341_DrawPixel>
}  /* Pixel_circle */
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bdb0      	pop	{r4, r5, r7, pc}

0800124a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f000 fa07 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001252:	f000 f80b 	bl	800126c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001256:	f000 f8a1 	bl	800139c <MX_GPIO_Init>
  MX_SPI5_Init();
 800125a:	f000 f867 	bl	800132c <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  SPIx_Init();
 800125e:	f7ff fa49 	bl	80006f4 <SPIx_Init>
  ili9341_Init();
 8001262:	f7ff fb07 	bl	8000874 <ili9341_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ili9341_MainDraw();
 8001266:	f7ff fd15 	bl	8000c94 <ili9341_MainDraw>
 800126a:	e7fc      	b.n	8001266 <main+0x1c>

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b094      	sub	sp, #80	; 0x50
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 0320 	add.w	r3, r7, #32
 8001276:	2230      	movs	r2, #48	; 0x30
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f001 fd4c 	bl	8002d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <SystemClock_Config+0xb8>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	4a22      	ldr	r2, [pc, #136]	; (8001324 <SystemClock_Config+0xb8>)
 800129a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129e:	6413      	str	r3, [r2, #64]	; 0x40
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <SystemClock_Config+0xb8>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <SystemClock_Config+0xbc>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012b8:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <SystemClock_Config+0xbc>)
 80012ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <SystemClock_Config+0xbc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d4:	2310      	movs	r3, #16
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012d8:	2300      	movs	r3, #0
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fe0b 	bl	8001efc <HAL_RCC_OscConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012ec:	f000 f8be 	bl	800146c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f0:	230f      	movs	r3, #15
 80012f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f001 f86e 	bl	80023ec <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001316:	f000 f8a9 	bl	800146c <Error_Handler>
  }
}
 800131a:	bf00      	nop
 800131c:	3750      	adds	r7, #80	; 0x50
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_SPI5_Init+0x68>)
 8001332:	4a19      	ldr	r2, [pc, #100]	; (8001398 <MX_SPI5_Init+0x6c>)
 8001334:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_SPI5_Init+0x68>)
 8001338:	f44f 7282 	mov.w	r2, #260	; 0x104
 800133c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_SPI5_Init+0x68>)
 8001340:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001344:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <MX_SPI5_Init+0x68>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_SPI5_Init+0x68>)
 800134e:	2202      	movs	r2, #2
 8001350:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_SPI5_Init+0x68>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_SPI5_Init+0x68>)
 800135a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_SPI5_Init+0x68>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_SPI5_Init+0x68>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_SPI5_Init+0x68>)
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_SPI5_Init+0x68>)
 8001374:	2200      	movs	r2, #0
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_SPI5_Init+0x68>)
 800137a:	220a      	movs	r2, #10
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_SPI5_Init+0x68>)
 8001380:	f001 f9e0 	bl	8002744 <HAL_SPI_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 800138a:	f000 f86f 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200000a0 	.word	0x200000a0
 8001398:	40015000 	.word	0x40015000

0800139c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <MX_GPIO_Init+0xc4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a29      	ldr	r2, [pc, #164]	; (8001460 <MX_GPIO_Init+0xc4>)
 80013bc:	f043 0320 	orr.w	r3, r3, #32
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b27      	ldr	r3, [pc, #156]	; (8001460 <MX_GPIO_Init+0xc4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0320 	and.w	r3, r3, #32
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <MX_GPIO_Init+0xc4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a22      	ldr	r2, [pc, #136]	; (8001460 <MX_GPIO_Init+0xc4>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <MX_GPIO_Init+0xc4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <MX_GPIO_Init+0xc4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <MX_GPIO_Init+0xc4>)
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_GPIO_Init+0xc4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2104      	movs	r1, #4
 800140a:	4816      	ldr	r0, [pc, #88]	; (8001464 <MX_GPIO_Init+0xc8>)
 800140c:	f000 fd5c 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001416:	4814      	ldr	r0, [pc, #80]	; (8001468 <MX_GPIO_Init+0xcc>)
 8001418:	f000 fd56 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800141c:	2304      	movs	r3, #4
 800141e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4619      	mov	r1, r3
 8001432:	480c      	ldr	r0, [pc, #48]	; (8001464 <MX_GPIO_Init+0xc8>)
 8001434:	f000 fa90 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001438:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800143c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_GPIO_Init+0xcc>)
 8001452:	f000 fa81 	bl	8001958 <HAL_GPIO_Init>

}
 8001456:	bf00      	nop
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40020800 	.word	0x40020800
 8001468:	40020c00 	.word	0x40020c00

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001474:	e7fe      	b.n	8001474 <Error_Handler+0x8>
	...

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_MspInit+0x4c>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a19      	ldr	r2, [pc, #100]	; (800154c <HAL_SPI_MspInit+0x84>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12c      	bne.n	8001544 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_SPI_MspInit+0x88>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_SPI_MspInit+0x88>)
 80014f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_SPI_MspInit+0x88>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_SPI_MspInit+0x88>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <HAL_SPI_MspInit+0x88>)
 8001510:	f043 0320 	orr.w	r3, r3, #32
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_SPI_MspInit+0x88>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001522:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001534:	2305      	movs	r3, #5
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_SPI_MspInit+0x8c>)
 8001540:	f000 fa0a 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40015000 	.word	0x40015000
 8001550:	40023800 	.word	0x40023800
 8001554:	40021400 	.word	0x40021400

08001558 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a08      	ldr	r2, [pc, #32]	; (8001588 <HAL_SPI_MspDeInit+0x30>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d10a      	bne.n	8001580 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_SPI_MspDeInit+0x34>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_SPI_MspDeInit+0x34>)
 8001570:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44

    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_9);
 8001576:	f44f 7120 	mov.w	r1, #640	; 0x280
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <HAL_SPI_MspDeInit+0x38>)
 800157c:	f000 fb98 	bl	8001cb0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40015000 	.word	0x40015000
 800158c:	40023800 	.word	0x40023800
 8001590:	40021400 	.word	0x40021400

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e0:	f000 f890 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <SystemInit+0x20>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <SystemInit+0x20>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001644 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001612:	490e      	ldr	r1, [pc, #56]	; (800164c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001614:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001628:	4c0b      	ldr	r4, [pc, #44]	; (8001658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001636:	f7ff ffd7 	bl	80015e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f001 fb49 	bl	8002cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7ff fe04 	bl	800124a <main>
  bx  lr    
 8001642:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001644:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001650:	08003500 	.word	0x08003500
  ldr r2, =_sbss
 8001654:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001658:	200000fc 	.word	0x200000fc

0800165c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_Init+0x40>)
 800166a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_Init+0x40>)
 8001676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_Init+0x40>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 f931 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168e:	200f      	movs	r0, #15
 8001690:	f000 f808 	bl	80016a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001694:	f7ff fef0 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023c00 	.word	0x40023c00

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x54>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x58>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f93b 	bl	800193e <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00e      	b.n	80016f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d80a      	bhi.n	80016ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f000 f911 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <HAL_InitTick+0x5c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000001c 	.word	0x2000001c
 80016fc:	20000024 	.word	0x20000024
 8001700:	20000020 	.word	0x20000020

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000024 	.word	0x20000024
 8001728:	200000f8 	.word	0x200000f8

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	200000f8 	.word	0x200000f8

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff ffee 	bl	800172c <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d005      	beq.n	800176a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_Delay+0x44>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800176a:	bf00      	nop
 800176c:	f7ff ffde 	bl	800172c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8f7      	bhi.n	800176c <HAL_Delay+0x28>
  {
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000024 	.word	0x20000024

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	; (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7ff ff8e 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff47 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff5c 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff8e 	bl	8001844 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5d 	bl	80017f0 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffb0 	bl	80018ac <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e177      	b.n	8001c64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 8166 	bne.w	8001c5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d005      	beq.n	80019aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d130      	bne.n	8001a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e0:	2201      	movs	r2, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 0201 	and.w	r2, r3, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d017      	beq.n	8001a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d123      	bne.n	8001a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	69b9      	ldr	r1, [r7, #24]
 8001a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0203 	and.w	r2, r3, #3
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80c0 	beq.w	8001c5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b66      	ldr	r3, [pc, #408]	; (8001c7c <HAL_GPIO_Init+0x324>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a65      	ldr	r2, [pc, #404]	; (8001c7c <HAL_GPIO_Init+0x324>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_GPIO_Init+0x324>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001afa:	4a61      	ldr	r2, [pc, #388]	; (8001c80 <HAL_GPIO_Init+0x328>)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	220f      	movs	r2, #15
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a58      	ldr	r2, [pc, #352]	; (8001c84 <HAL_GPIO_Init+0x32c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d037      	beq.n	8001b96 <HAL_GPIO_Init+0x23e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a57      	ldr	r2, [pc, #348]	; (8001c88 <HAL_GPIO_Init+0x330>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d031      	beq.n	8001b92 <HAL_GPIO_Init+0x23a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a56      	ldr	r2, [pc, #344]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d02b      	beq.n	8001b8e <HAL_GPIO_Init+0x236>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a55      	ldr	r2, [pc, #340]	; (8001c90 <HAL_GPIO_Init+0x338>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d025      	beq.n	8001b8a <HAL_GPIO_Init+0x232>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a54      	ldr	r2, [pc, #336]	; (8001c94 <HAL_GPIO_Init+0x33c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d01f      	beq.n	8001b86 <HAL_GPIO_Init+0x22e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a53      	ldr	r2, [pc, #332]	; (8001c98 <HAL_GPIO_Init+0x340>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d019      	beq.n	8001b82 <HAL_GPIO_Init+0x22a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_GPIO_Init+0x344>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d013      	beq.n	8001b7e <HAL_GPIO_Init+0x226>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a51      	ldr	r2, [pc, #324]	; (8001ca0 <HAL_GPIO_Init+0x348>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00d      	beq.n	8001b7a <HAL_GPIO_Init+0x222>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a50      	ldr	r2, [pc, #320]	; (8001ca4 <HAL_GPIO_Init+0x34c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d007      	beq.n	8001b76 <HAL_GPIO_Init+0x21e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4f      	ldr	r2, [pc, #316]	; (8001ca8 <HAL_GPIO_Init+0x350>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d101      	bne.n	8001b72 <HAL_GPIO_Init+0x21a>
 8001b6e:	2309      	movs	r3, #9
 8001b70:	e012      	b.n	8001b98 <HAL_GPIO_Init+0x240>
 8001b72:	230a      	movs	r3, #10
 8001b74:	e010      	b.n	8001b98 <HAL_GPIO_Init+0x240>
 8001b76:	2308      	movs	r3, #8
 8001b78:	e00e      	b.n	8001b98 <HAL_GPIO_Init+0x240>
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	e00c      	b.n	8001b98 <HAL_GPIO_Init+0x240>
 8001b7e:	2306      	movs	r3, #6
 8001b80:	e00a      	b.n	8001b98 <HAL_GPIO_Init+0x240>
 8001b82:	2305      	movs	r3, #5
 8001b84:	e008      	b.n	8001b98 <HAL_GPIO_Init+0x240>
 8001b86:	2304      	movs	r3, #4
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x240>
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e004      	b.n	8001b98 <HAL_GPIO_Init+0x240>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e002      	b.n	8001b98 <HAL_GPIO_Init+0x240>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_GPIO_Init+0x240>
 8001b96:	2300      	movs	r3, #0
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	f002 0203 	and.w	r2, r2, #3
 8001b9e:	0092      	lsls	r2, r2, #2
 8001ba0:	4093      	lsls	r3, r2
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba8:	4935      	ldr	r1, [pc, #212]	; (8001c80 <HAL_GPIO_Init+0x328>)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_GPIO_Init+0x354>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bda:	4a34      	ldr	r2, [pc, #208]	; (8001cac <HAL_GPIO_Init+0x354>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be0:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_GPIO_Init+0x354>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c04:	4a29      	ldr	r2, [pc, #164]	; (8001cac <HAL_GPIO_Init+0x354>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c0a:	4b28      	ldr	r3, [pc, #160]	; (8001cac <HAL_GPIO_Init+0x354>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2e:	4a1f      	ldr	r2, [pc, #124]	; (8001cac <HAL_GPIO_Init+0x354>)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_GPIO_Init+0x354>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c58:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_GPIO_Init+0x354>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	2b0f      	cmp	r3, #15
 8001c68:	f67f ae84 	bls.w	8001974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40013800 	.word	0x40013800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	40020400 	.word	0x40020400
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	40020c00 	.word	0x40020c00
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40021400 	.word	0x40021400
 8001c9c:	40021800 	.word	0x40021800
 8001ca0:	40021c00 	.word	0x40021c00
 8001ca4:	40022000 	.word	0x40022000
 8001ca8:	40022400 	.word	0x40022400
 8001cac:	40013c00 	.word	0x40013c00

08001cb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e0d9      	b.n	8001e80 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	f040 80c9 	bne.w	8001e7a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001ce8:	4a6b      	ldr	r2, [pc, #428]	; (8001e98 <HAL_GPIO_DeInit+0x1e8>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	4013      	ands	r3, r2
 8001d08:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a63      	ldr	r2, [pc, #396]	; (8001e9c <HAL_GPIO_DeInit+0x1ec>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d037      	beq.n	8001d82 <HAL_GPIO_DeInit+0xd2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a62      	ldr	r2, [pc, #392]	; (8001ea0 <HAL_GPIO_DeInit+0x1f0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d031      	beq.n	8001d7e <HAL_GPIO_DeInit+0xce>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a61      	ldr	r2, [pc, #388]	; (8001ea4 <HAL_GPIO_DeInit+0x1f4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d02b      	beq.n	8001d7a <HAL_GPIO_DeInit+0xca>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a60      	ldr	r2, [pc, #384]	; (8001ea8 <HAL_GPIO_DeInit+0x1f8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d025      	beq.n	8001d76 <HAL_GPIO_DeInit+0xc6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a5f      	ldr	r2, [pc, #380]	; (8001eac <HAL_GPIO_DeInit+0x1fc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d01f      	beq.n	8001d72 <HAL_GPIO_DeInit+0xc2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a5e      	ldr	r2, [pc, #376]	; (8001eb0 <HAL_GPIO_DeInit+0x200>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d019      	beq.n	8001d6e <HAL_GPIO_DeInit+0xbe>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a5d      	ldr	r2, [pc, #372]	; (8001eb4 <HAL_GPIO_DeInit+0x204>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_DeInit+0xba>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a5c      	ldr	r2, [pc, #368]	; (8001eb8 <HAL_GPIO_DeInit+0x208>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00d      	beq.n	8001d66 <HAL_GPIO_DeInit+0xb6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a5b      	ldr	r2, [pc, #364]	; (8001ebc <HAL_GPIO_DeInit+0x20c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d007      	beq.n	8001d62 <HAL_GPIO_DeInit+0xb2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a5a      	ldr	r2, [pc, #360]	; (8001ec0 <HAL_GPIO_DeInit+0x210>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d101      	bne.n	8001d5e <HAL_GPIO_DeInit+0xae>
 8001d5a:	2309      	movs	r3, #9
 8001d5c:	e012      	b.n	8001d84 <HAL_GPIO_DeInit+0xd4>
 8001d5e:	230a      	movs	r3, #10
 8001d60:	e010      	b.n	8001d84 <HAL_GPIO_DeInit+0xd4>
 8001d62:	2308      	movs	r3, #8
 8001d64:	e00e      	b.n	8001d84 <HAL_GPIO_DeInit+0xd4>
 8001d66:	2307      	movs	r3, #7
 8001d68:	e00c      	b.n	8001d84 <HAL_GPIO_DeInit+0xd4>
 8001d6a:	2306      	movs	r3, #6
 8001d6c:	e00a      	b.n	8001d84 <HAL_GPIO_DeInit+0xd4>
 8001d6e:	2305      	movs	r3, #5
 8001d70:	e008      	b.n	8001d84 <HAL_GPIO_DeInit+0xd4>
 8001d72:	2304      	movs	r3, #4
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_DeInit+0xd4>
 8001d76:	2303      	movs	r3, #3
 8001d78:	e004      	b.n	8001d84 <HAL_GPIO_DeInit+0xd4>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e002      	b.n	8001d84 <HAL_GPIO_DeInit+0xd4>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_GPIO_DeInit+0xd4>
 8001d82:	2300      	movs	r3, #0
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	f002 0203 	and.w	r2, r2, #3
 8001d8a:	0092      	lsls	r2, r2, #2
 8001d8c:	4093      	lsls	r3, r2
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d132      	bne.n	8001dfa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001d94:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <HAL_GPIO_DeInit+0x214>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	4949      	ldr	r1, [pc, #292]	; (8001ec4 <HAL_GPIO_DeInit+0x214>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001da2:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <HAL_GPIO_DeInit+0x214>)
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4946      	ldr	r1, [pc, #280]	; (8001ec4 <HAL_GPIO_DeInit+0x214>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_GPIO_DeInit+0x214>)
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	4942      	ldr	r1, [pc, #264]	; (8001ec4 <HAL_GPIO_DeInit+0x214>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001dbe:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_GPIO_DeInit+0x214>)
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	493f      	ldr	r1, [pc, #252]	; (8001ec4 <HAL_GPIO_DeInit+0x214>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ddc:	4a2e      	ldr	r2, [pc, #184]	; (8001e98 <HAL_GPIO_DeInit+0x1e8>)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	3302      	adds	r3, #2
 8001de4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	43da      	mvns	r2, r3
 8001dec:	482a      	ldr	r0, [pc, #168]	; (8001e98 <HAL_GPIO_DeInit+0x1e8>)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	400a      	ands	r2, r1
 8001df4:	3302      	adds	r3, #2
 8001df6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2103      	movs	r1, #3
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	08da      	lsrs	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3208      	adds	r2, #8
 8001e18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	08d2      	lsrs	r2, r2, #3
 8001e30:	4019      	ands	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3208      	adds	r2, #8
 8001e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2103      	movs	r1, #3
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	2101      	movs	r1, #1
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	401a      	ands	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2103      	movs	r1, #3
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	401a      	ands	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b0f      	cmp	r3, #15
 8001e84:	f67f af22 	bls.w	8001ccc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40013800 	.word	0x40013800
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40020c00 	.word	0x40020c00
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40021400 	.word	0x40021400
 8001eb4:	40021800 	.word	0x40021800
 8001eb8:	40021c00 	.word	0x40021c00
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40022400 	.word	0x40022400
 8001ec4:	40013c00 	.word	0x40013c00

08001ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed8:	787b      	ldrb	r3, [r7, #1]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee4:	e003      	b.n	8001eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ee6:	887b      	ldrh	r3, [r7, #2]
 8001ee8:	041a      	lsls	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	619a      	str	r2, [r3, #24]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e267      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d075      	beq.n	8002006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1a:	4b88      	ldr	r3, [pc, #544]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d00c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f26:	4b85      	ldr	r3, [pc, #532]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d112      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f32:	4b82      	ldr	r3, [pc, #520]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4b7e      	ldr	r3, [pc, #504]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d05b      	beq.n	8002004 <HAL_RCC_OscConfig+0x108>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d157      	bne.n	8002004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e242      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f60:	d106      	bne.n	8001f70 <HAL_RCC_OscConfig+0x74>
 8001f62:	4b76      	ldr	r3, [pc, #472]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a75      	ldr	r2, [pc, #468]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e01d      	b.n	8001fac <HAL_RCC_OscConfig+0xb0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x98>
 8001f7a:	4b70      	ldr	r3, [pc, #448]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a6f      	ldr	r2, [pc, #444]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b6d      	ldr	r3, [pc, #436]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a6c      	ldr	r2, [pc, #432]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0xb0>
 8001f94:	4b69      	ldr	r3, [pc, #420]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a68      	ldr	r2, [pc, #416]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b66      	ldr	r3, [pc, #408]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a65      	ldr	r2, [pc, #404]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fbba 	bl	800172c <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff fbb6 	bl	800172c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e207      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b5b      	ldr	r3, [pc, #364]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0xc0>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fba6 	bl	800172c <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7ff fba2 	bl	800172c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e1f3      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	4b51      	ldr	r3, [pc, #324]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0xe8>
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d063      	beq.n	80020da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201e:	4b47      	ldr	r3, [pc, #284]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002026:	2b08      	cmp	r3, #8
 8002028:	d11c      	bne.n	8002064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202a:	4b44      	ldr	r3, [pc, #272]	; (800213c <HAL_RCC_OscConfig+0x240>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d116      	bne.n	8002064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	4b41      	ldr	r3, [pc, #260]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_RCC_OscConfig+0x152>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d001      	beq.n	800204e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e1c7      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4937      	ldr	r1, [pc, #220]	; (800213c <HAL_RCC_OscConfig+0x240>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	e03a      	b.n	80020da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d020      	beq.n	80020ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206c:	4b34      	ldr	r3, [pc, #208]	; (8002140 <HAL_RCC_OscConfig+0x244>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002072:	f7ff fb5b 	bl	800172c <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207a:	f7ff fb57 	bl	800172c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e1a8      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_RCC_OscConfig+0x240>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	4b28      	ldr	r3, [pc, #160]	; (800213c <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4925      	ldr	r1, [pc, #148]	; (800213c <HAL_RCC_OscConfig+0x240>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
 80020ac:	e015      	b.n	80020da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_OscConfig+0x244>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7ff fb3a 	bl	800172c <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020bc:	f7ff fb36 	bl	800172c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e187      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d036      	beq.n	8002154 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d016      	beq.n	800211c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_RCC_OscConfig+0x248>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7ff fb1a 	bl	800172c <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fc:	f7ff fb16 	bl	800172c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e167      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8002110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x200>
 800211a:	e01b      	b.n	8002154 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_OscConfig+0x248>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7ff fb03 	bl	800172c <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	e00e      	b.n	8002148 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212a:	f7ff faff 	bl	800172c <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d907      	bls.n	8002148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e150      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
 800213c:	40023800 	.word	0x40023800
 8002140:	42470000 	.word	0x42470000
 8002144:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002148:	4b88      	ldr	r3, [pc, #544]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800214a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ea      	bne.n	800212a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8097 	beq.w	8002290 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002166:	4b81      	ldr	r3, [pc, #516]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10f      	bne.n	8002192 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b7d      	ldr	r3, [pc, #500]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a7c      	ldr	r2, [pc, #496]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
 8002182:	4b7a      	ldr	r3, [pc, #488]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218e:	2301      	movs	r3, #1
 8002190:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	4b77      	ldr	r3, [pc, #476]	; (8002370 <HAL_RCC_OscConfig+0x474>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d118      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219e:	4b74      	ldr	r3, [pc, #464]	; (8002370 <HAL_RCC_OscConfig+0x474>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a73      	ldr	r2, [pc, #460]	; (8002370 <HAL_RCC_OscConfig+0x474>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021aa:	f7ff fabf 	bl	800172c <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b2:	f7ff fabb 	bl	800172c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e10c      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	4b6a      	ldr	r3, [pc, #424]	; (8002370 <HAL_RCC_OscConfig+0x474>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x2ea>
 80021d8:	4b64      	ldr	r3, [pc, #400]	; (800236c <HAL_RCC_OscConfig+0x470>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a63      	ldr	r2, [pc, #396]	; (800236c <HAL_RCC_OscConfig+0x470>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
 80021e4:	e01c      	b.n	8002220 <HAL_RCC_OscConfig+0x324>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x30c>
 80021ee:	4b5f      	ldr	r3, [pc, #380]	; (800236c <HAL_RCC_OscConfig+0x470>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	4a5e      	ldr	r2, [pc, #376]	; (800236c <HAL_RCC_OscConfig+0x470>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	6713      	str	r3, [r2, #112]	; 0x70
 80021fa:	4b5c      	ldr	r3, [pc, #368]	; (800236c <HAL_RCC_OscConfig+0x470>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	4a5b      	ldr	r2, [pc, #364]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0x324>
 8002208:	4b58      	ldr	r3, [pc, #352]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	4a57      	ldr	r2, [pc, #348]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	6713      	str	r3, [r2, #112]	; 0x70
 8002214:	4b55      	ldr	r3, [pc, #340]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	4a54      	ldr	r2, [pc, #336]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800221a:	f023 0304 	bic.w	r3, r3, #4
 800221e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d015      	beq.n	8002254 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002228:	f7ff fa80 	bl	800172c <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222e:	e00a      	b.n	8002246 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7ff fa7c 	bl	800172c <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e0cb      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002246:	4b49      	ldr	r3, [pc, #292]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0ee      	beq.n	8002230 <HAL_RCC_OscConfig+0x334>
 8002252:	e014      	b.n	800227e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002254:	f7ff fa6a 	bl	800172c <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225a:	e00a      	b.n	8002272 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800225c:	f7ff fa66 	bl	800172c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f241 3288 	movw	r2, #5000	; 0x1388
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e0b5      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002272:	4b3e      	ldr	r3, [pc, #248]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ee      	bne.n	800225c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d105      	bne.n	8002290 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002284:	4b39      	ldr	r3, [pc, #228]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	4a38      	ldr	r2, [pc, #224]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800228a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a1 	beq.w	80023dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229a:	4b34      	ldr	r3, [pc, #208]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d05c      	beq.n	8002360 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d141      	bne.n	8002332 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCC_OscConfig+0x478>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff fa3a 	bl	800172c <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022bc:	f7ff fa36 	bl	800172c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e087      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ce:	4b27      	ldr	r3, [pc, #156]	; (800236c <HAL_RCC_OscConfig+0x470>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	019b      	lsls	r3, r3, #6
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	085b      	lsrs	r3, r3, #1
 80022f2:	3b01      	subs	r3, #1
 80022f4:	041b      	lsls	r3, r3, #16
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	061b      	lsls	r3, r3, #24
 80022fe:	491b      	ldr	r1, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_RCC_OscConfig+0x478>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7ff fa0f 	bl	800172c <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002312:	f7ff fa0b 	bl	800172c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e05c      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x416>
 8002330:	e054      	b.n	80023dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_RCC_OscConfig+0x478>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff f9f8 	bl	800172c <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002340:	f7ff f9f4 	bl	800172c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e045      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x444>
 800235e:	e03d      	b.n	80023dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d107      	bne.n	8002378 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e038      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
 800236c:	40023800 	.word	0x40023800
 8002370:	40007000 	.word	0x40007000
 8002374:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x4ec>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d028      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d121      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d11a      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d111      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	085b      	lsrs	r3, r3, #1
 80023c0:	3b01      	subs	r3, #1
 80023c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0cc      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002400:	4b68      	ldr	r3, [pc, #416]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d90c      	bls.n	8002428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b65      	ldr	r3, [pc, #404]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b63      	ldr	r3, [pc, #396]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0b8      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002440:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a58      	ldr	r2, [pc, #352]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800244a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002458:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b50      	ldr	r3, [pc, #320]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	494d      	ldr	r1, [pc, #308]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d044      	beq.n	800250c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d119      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e07f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d003      	beq.n	80024aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024aa:	4b3f      	ldr	r3, [pc, #252]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ba:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e067      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ca:	4b37      	ldr	r3, [pc, #220]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f023 0203 	bic.w	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4934      	ldr	r1, [pc, #208]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024dc:	f7ff f926 	bl	800172c <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e4:	f7ff f922 	bl	800172c <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e04f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 020c 	and.w	r2, r3, #12
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	429a      	cmp	r2, r3
 800250a:	d1eb      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d20c      	bcs.n	8002534 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e032      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4916      	ldr	r1, [pc, #88]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	490e      	ldr	r1, [pc, #56]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002572:	f000 f821 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002576:	4602      	mov	r2, r0
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	490a      	ldr	r1, [pc, #40]	; (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	5ccb      	ldrb	r3, [r1, r3]
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a09      	ldr	r2, [pc, #36]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff f886 	bl	80016a4 <HAL_InitTick>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023c00 	.word	0x40023c00
 80025a8:	40023800 	.word	0x40023800
 80025ac:	080034e0 	.word	0x080034e0
 80025b0:	2000001c 	.word	0x2000001c
 80025b4:	20000020 	.word	0x20000020

080025b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025bc:	b090      	sub	sp, #64	; 0x40
 80025be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
 80025c4:	2300      	movs	r3, #0
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c8:	2300      	movs	r3, #0
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_RCC_GetSysClockFreq+0x180>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d00d      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x40>
 80025dc:	2b08      	cmp	r3, #8
 80025de:	f200 80a1 	bhi.w	8002724 <HAL_RCC_GetSysClockFreq+0x16c>
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x34>
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d003      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ea:	e09b      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_RCC_GetSysClockFreq+0x184>)
 80025ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80025f0:	e09b      	b.n	800272a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f2:	4b53      	ldr	r3, [pc, #332]	; (8002740 <HAL_RCC_GetSysClockFreq+0x188>)
 80025f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025f6:	e098      	b.n	800272a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f8:	4b4f      	ldr	r3, [pc, #316]	; (8002738 <HAL_RCC_GetSysClockFreq+0x180>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002602:	4b4d      	ldr	r3, [pc, #308]	; (8002738 <HAL_RCC_GetSysClockFreq+0x180>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d028      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260e:	4b4a      	ldr	r3, [pc, #296]	; (8002738 <HAL_RCC_GetSysClockFreq+0x180>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	099b      	lsrs	r3, r3, #6
 8002614:	2200      	movs	r2, #0
 8002616:	623b      	str	r3, [r7, #32]
 8002618:	627a      	str	r2, [r7, #36]	; 0x24
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002620:	2100      	movs	r1, #0
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_RCC_GetSysClockFreq+0x188>)
 8002624:	fb03 f201 	mul.w	r2, r3, r1
 8002628:	2300      	movs	r3, #0
 800262a:	fb00 f303 	mul.w	r3, r0, r3
 800262e:	4413      	add	r3, r2
 8002630:	4a43      	ldr	r2, [pc, #268]	; (8002740 <HAL_RCC_GetSysClockFreq+0x188>)
 8002632:	fba0 1202 	umull	r1, r2, r0, r2
 8002636:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002638:	460a      	mov	r2, r1
 800263a:	62ba      	str	r2, [r7, #40]	; 0x28
 800263c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263e:	4413      	add	r3, r2
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002644:	2200      	movs	r2, #0
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	61fa      	str	r2, [r7, #28]
 800264a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002652:	f7fd fdcb 	bl	80001ec <__aeabi_uldivmod>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4613      	mov	r3, r2
 800265c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800265e:	e053      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002660:	4b35      	ldr	r3, [pc, #212]	; (8002738 <HAL_RCC_GetSysClockFreq+0x180>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	099b      	lsrs	r3, r3, #6
 8002666:	2200      	movs	r2, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	617a      	str	r2, [r7, #20]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002672:	f04f 0b00 	mov.w	fp, #0
 8002676:	4652      	mov	r2, sl
 8002678:	465b      	mov	r3, fp
 800267a:	f04f 0000 	mov.w	r0, #0
 800267e:	f04f 0100 	mov.w	r1, #0
 8002682:	0159      	lsls	r1, r3, #5
 8002684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002688:	0150      	lsls	r0, r2, #5
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	ebb2 080a 	subs.w	r8, r2, sl
 8002692:	eb63 090b 	sbc.w	r9, r3, fp
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026aa:	ebb2 0408 	subs.w	r4, r2, r8
 80026ae:	eb63 0509 	sbc.w	r5, r3, r9
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	00eb      	lsls	r3, r5, #3
 80026bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c0:	00e2      	lsls	r2, r4, #3
 80026c2:	4614      	mov	r4, r2
 80026c4:	461d      	mov	r5, r3
 80026c6:	eb14 030a 	adds.w	r3, r4, sl
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	eb45 030b 	adc.w	r3, r5, fp
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026de:	4629      	mov	r1, r5
 80026e0:	028b      	lsls	r3, r1, #10
 80026e2:	4621      	mov	r1, r4
 80026e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026e8:	4621      	mov	r1, r4
 80026ea:	028a      	lsls	r2, r1, #10
 80026ec:	4610      	mov	r0, r2
 80026ee:	4619      	mov	r1, r3
 80026f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f2:	2200      	movs	r2, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	60fa      	str	r2, [r7, #12]
 80026f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026fc:	f7fd fd76 	bl	80001ec <__aeabi_uldivmod>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4613      	mov	r3, r2
 8002706:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_GetSysClockFreq+0x180>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	0c1b      	lsrs	r3, r3, #16
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	3301      	adds	r3, #1
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002722:	e002      	b.n	800272a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCC_GetSysClockFreq+0x184>)
 8002726:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800272c:	4618      	mov	r0, r3
 800272e:	3740      	adds	r7, #64	; 0x40
 8002730:	46bd      	mov	sp, r7
 8002732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	00f42400 	.word	0x00f42400
 8002740:	017d7840 	.word	0x017d7840

08002744 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e07b      	b.n	800284e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d108      	bne.n	8002770 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002766:	d009      	beq.n	800277c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
 800276e:	e005      	b.n	800277c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe fe96 	bl	80014c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	ea42 0103 	orr.w	r1, r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	f003 0104 	and.w	r1, r3, #4
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	f003 0210 	and.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e01a      	b.n	800289e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800287e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7fe fe69 	bl	8001558 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b088      	sub	sp, #32
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	4613      	mov	r3, r2
 80028b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_SPI_Transmit+0x22>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e126      	b.n	8002b16 <HAL_SPI_Transmit+0x270>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028d0:	f7fe ff2c 	bl	800172c <HAL_GetTick>
 80028d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d002      	beq.n	80028ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028e6:	2302      	movs	r3, #2
 80028e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028ea:	e10b      	b.n	8002b04 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_SPI_Transmit+0x52>
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028fc:	e102      	b.n	8002b04 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2203      	movs	r2, #3
 8002902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	88fa      	ldrh	r2, [r7, #6]
 8002916:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	88fa      	ldrh	r2, [r7, #6]
 800291c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002944:	d10f      	bne.n	8002966 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002954:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002964:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002970:	2b40      	cmp	r3, #64	; 0x40
 8002972:	d007      	beq.n	8002984 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002982:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800298c:	d14b      	bne.n	8002a26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_SPI_Transmit+0xf6>
 8002996:	8afb      	ldrh	r3, [r7, #22]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d13e      	bne.n	8002a1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	1c9a      	adds	r2, r3, #2
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029c0:	e02b      	b.n	8002a1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d112      	bne.n	80029f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	881a      	ldrh	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	1c9a      	adds	r2, r3, #2
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80029f4:	e011      	b.n	8002a1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029f6:	f7fe fe99 	bl	800172c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d803      	bhi.n	8002a0e <HAL_SPI_Transmit+0x168>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d102      	bne.n	8002a14 <HAL_SPI_Transmit+0x16e>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a18:	e074      	b.n	8002b04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ce      	bne.n	80029c2 <HAL_SPI_Transmit+0x11c>
 8002a24:	e04c      	b.n	8002ac0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <HAL_SPI_Transmit+0x18e>
 8002a2e:	8afb      	ldrh	r3, [r7, #22]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d140      	bne.n	8002ab6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	7812      	ldrb	r2, [r2, #0]
 8002a40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a5a:	e02c      	b.n	8002ab6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d113      	bne.n	8002a92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	330c      	adds	r3, #12
 8002a74:	7812      	ldrb	r2, [r2, #0]
 8002a76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a90:	e011      	b.n	8002ab6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a92:	f7fe fe4b 	bl	800172c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d803      	bhi.n	8002aaa <HAL_SPI_Transmit+0x204>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d102      	bne.n	8002ab0 <HAL_SPI_Transmit+0x20a>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ab4:	e026      	b.n	8002b04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1cd      	bne.n	8002a5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	6839      	ldr	r1, [r7, #0]
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f8c1 	bl	8002c4c <SPI_EndRxTxTransaction>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	77fb      	strb	r3, [r7, #31]
 8002b00:	e000      	b.n	8002b04 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b14:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b2c:	b2db      	uxtb	r3, r3
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b4c:	f7fe fdee 	bl	800172c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	4413      	add	r3, r2
 8002b5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b5c:	f7fe fde6 	bl	800172c <HAL_GetTick>
 8002b60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b62:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	015b      	lsls	r3, r3, #5
 8002b68:	0d1b      	lsrs	r3, r3, #20
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b72:	e054      	b.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7a:	d050      	beq.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b7c:	f7fe fdd6 	bl	800172c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d902      	bls.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d13d      	bne.n	8002c0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ba0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002baa:	d111      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d004      	beq.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d107      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd8:	d10f      	bne.n	8002bfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e017      	b.n	8002c3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d19b      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000001c 	.word	0x2000001c

08002c4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <SPI_EndRxTxTransaction+0x7c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <SPI_EndRxTxTransaction+0x80>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0d5b      	lsrs	r3, r3, #21
 8002c64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c76:	d112      	bne.n	8002c9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2180      	movs	r1, #128	; 0x80
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff ff5a 	bl	8002b3c <SPI_WaitFlagStateUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d016      	beq.n	8002cbc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	f043 0220 	orr.w	r2, r3, #32
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e00f      	b.n	8002cbe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb4:	2b80      	cmp	r3, #128	; 0x80
 8002cb6:	d0f2      	beq.n	8002c9e <SPI_EndRxTxTransaction+0x52>
 8002cb8:	e000      	b.n	8002cbc <SPI_EndRxTxTransaction+0x70>
        break;
 8002cba:	bf00      	nop
  }

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	2000001c 	.word	0x2000001c
 8002ccc:	165e9f81 	.word	0x165e9f81

08002cd0 <__libc_init_array>:
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	4d0d      	ldr	r5, [pc, #52]	; (8002d08 <__libc_init_array+0x38>)
 8002cd4:	4c0d      	ldr	r4, [pc, #52]	; (8002d0c <__libc_init_array+0x3c>)
 8002cd6:	1b64      	subs	r4, r4, r5
 8002cd8:	10a4      	asrs	r4, r4, #2
 8002cda:	2600      	movs	r6, #0
 8002cdc:	42a6      	cmp	r6, r4
 8002cde:	d109      	bne.n	8002cf4 <__libc_init_array+0x24>
 8002ce0:	4d0b      	ldr	r5, [pc, #44]	; (8002d10 <__libc_init_array+0x40>)
 8002ce2:	4c0c      	ldr	r4, [pc, #48]	; (8002d14 <__libc_init_array+0x44>)
 8002ce4:	f000 f820 	bl	8002d28 <_init>
 8002ce8:	1b64      	subs	r4, r4, r5
 8002cea:	10a4      	asrs	r4, r4, #2
 8002cec:	2600      	movs	r6, #0
 8002cee:	42a6      	cmp	r6, r4
 8002cf0:	d105      	bne.n	8002cfe <__libc_init_array+0x2e>
 8002cf2:	bd70      	pop	{r4, r5, r6, pc}
 8002cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf8:	4798      	blx	r3
 8002cfa:	3601      	adds	r6, #1
 8002cfc:	e7ee      	b.n	8002cdc <__libc_init_array+0xc>
 8002cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d02:	4798      	blx	r3
 8002d04:	3601      	adds	r6, #1
 8002d06:	e7f2      	b.n	8002cee <__libc_init_array+0x1e>
 8002d08:	080034f8 	.word	0x080034f8
 8002d0c:	080034f8 	.word	0x080034f8
 8002d10:	080034f8 	.word	0x080034f8
 8002d14:	080034fc 	.word	0x080034fc

08002d18 <memset>:
 8002d18:	4402      	add	r2, r0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <memset+0xa>
 8002d20:	4770      	bx	lr
 8002d22:	f803 1b01 	strb.w	r1, [r3], #1
 8002d26:	e7f9      	b.n	8002d1c <memset+0x4>

08002d28 <_init>:
 8002d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2a:	bf00      	nop
 8002d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2e:	bc08      	pop	{r3}
 8002d30:	469e      	mov	lr, r3
 8002d32:	4770      	bx	lr

08002d34 <_fini>:
 8002d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d36:	bf00      	nop
 8002d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3a:	bc08      	pop	{r3}
 8002d3c:	469e      	mov	lr, r3
 8002d3e:	4770      	bx	lr
